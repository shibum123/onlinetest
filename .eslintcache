[{"C:\\Projects\\onlinetest\\src\\index.js":"1","C:\\Projects\\onlinetest\\src\\App.js":"2","C:\\Projects\\onlinetest\\src\\reportWebVitals.js":"3","C:\\Projects\\onlinetest\\src\\components\\Main.jsx":"4","C:\\Projects\\onlinetest\\src\\reducers\\mainReducer.js":"5","C:\\Projects\\onlinetest\\src\\configureStore.js":"6","C:\\Projects\\onlinetest\\src\\components\\OptionView.js":"7","C:\\Projects\\onlinetest\\src\\components\\settings\\Settings.jsx":"8","C:\\Projects\\onlinetest\\src\\components\\questionform\\QuestionForm.js":"9"},{"size":646,"mtime":1609855879897,"results":"10","hashOfConfig":"11"},{"size":1010,"mtime":1610983691261,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1609765807711,"results":"13","hashOfConfig":"11"},{"size":4880,"mtime":1611021504014,"results":"14","hashOfConfig":"11"},{"size":2517,"mtime":1611025179901,"results":"15","hashOfConfig":"11"},{"size":233,"mtime":1609785402425,"results":"16","hashOfConfig":"11"},{"size":2788,"mtime":1611022302484,"results":"17","hashOfConfig":"11"},{"size":3183,"mtime":1611025145052,"results":"18","hashOfConfig":"11"},{"size":3698,"mtime":1610992448944,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1j3ha8i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Projects\\onlinetest\\src\\index.js",[],["42","43"],"C:\\Projects\\onlinetest\\src\\App.js",[],"C:\\Projects\\onlinetest\\src\\reportWebVitals.js",[],"C:\\Projects\\onlinetest\\src\\components\\Main.jsx",["44","45","46","47","48","49","50"],"import React, { useState, useEffect } from 'react';\r\nimport { questions } from '../data/data.json';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setQuestions, setShowAnswers } from '../reducers/mainReducer';\r\nimport { OptionView } from './OptionView';\r\n\r\nconst Main = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const jsonData = useSelector((state) => (state.main.questions));\r\n\r\n    const allQuestions = useSelector((state) => (state.main.filteredQuestions));\r\n\r\n    useEffect(() => {\r\n        dispatch(setQuestions(questions))\r\n    }, []);\r\n\r\n    let [currentPage, setCurrentPage] = useState(0);\r\n    const showAnswers = useSelector(state => state.main.showAnswers);\r\n\r\n    let [score, setScore] = useState(0);\r\n    const [time, setTime] = useState(0);\r\n    const [wrong_array, setWrong_array] = useState([]);\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        setWrong_array([]);\r\n        const arr = [];\r\n        allQuestions.map(item => {\r\n            if (item.ans.toString() === getResult(item).toString()) {\r\n                setScore(++score);\r\n            } else {\r\n                arr.push(item.id);\r\n            }\r\n        });\r\n        setWrong_array(arr);\r\n        dispatch(setShowAnswers(true));\r\n\r\n    }\r\n\r\n    const getResult = (quest) => {\r\n        const result = [];\r\n        if (quest.selectedOptions) {\r\n            quest.selectedOptions.map((item, index) => {\r\n                if (item === true) result.push(quest.options[index]);\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const onNext = () => {\r\n        if (currentPage < allQuestions.length - 1) setCurrentPage(++currentPage);\r\n    }\r\n\r\n    const onPrev = (event) => {\r\n        event.preventDefault();\r\n        if (currentPage > 0) setCurrentPage(--currentPage);\r\n    }\r\n\r\n    const onChange = (event, index) => {\r\n        if (!allQuestions[currentPage].selectedOptions) allQuestions[currentPage].selectedOptions = [];\r\n        allQuestions[currentPage].selectedOptions[index] = event.target.checked\r\n    }\r\n\r\n    const getMessage = (score) => {\r\n        const percent = (score / allQuestions.length * 100).toFixed(2);\r\n        if (percent < 50) {\r\n            return 'You score is very poor! Go and Study again Kanishk!'\r\n        } else if (percent < 70) {\r\n            return 'You score is poor! Go and Study again Kanishk!'\r\n        } else if (percent < 80) {\r\n            return 'You score is fair! Go and Study again Kanishk!'\r\n        } else if (percent < 90) {\r\n            return 'You score is good! Study well Kanishk!'\r\n        } else if (percent < 100) {\r\n            return 'You score is very good! Try to get 100% Kanishk!'\r\n        } else if (percent === '100.00') {\r\n            return 'You score is excellent! Good job Kanishk!'\r\n        }\r\n    }\r\n\r\n    const downloadJson = () => {\r\n        questions.map(item => {\r\n            item.attempted_count += 1;\r\n            delete item.selectedOptions;\r\n            if(wrong_array.indexOf(item.id) > -1) {\r\n                item.wrong_count += 1;\r\n            }\r\n        })\r\n\r\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(questions));\r\n        const downloadAnchorNode = document.createElement('a');\r\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n        downloadAnchorNode.setAttribute(\"download\", \"data.json\");\r\n        document.body.appendChild(downloadAnchorNode); // required for firefox\r\n        downloadAnchorNode.click();\r\n        downloadAnchorNode.remove();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {showAnswers && <h1>{getMessage(score)}</h1>}\r\n            {showAnswers && <h1>{`Your score is: ${(score / allQuestions.length * 100).toFixed(2)} %`}</h1>}\r\n            {!showAnswers && (allQuestions.length > 0) && <h3>{`Question ${currentPage + 1} out of ${allQuestions.length}`}</h3>}\r\n            {showAnswers && (allQuestions.length > 0) ? allQuestions.map((question, index) => <OptionView question={question} index={index} />) : <OptionView question={allQuestions[currentPage]} index={currentPage} onChange={onChange} />}\r\n            <div className=\"buttonContainer\">\r\n                <button className={currentPage <= 0 ? 'btn btn-primary disabled' : 'btn btn-primary'} onClick={onPrev}>&lt;&lt;</button>&nbsp;&nbsp;&nbsp;\r\n                <button className={(currentPage < allQuestions.length - 1) ? 'btn btn-primary' : 'btn btn-primary disabled'} onClick={onNext}>&gt;&gt;</button>&nbsp;&nbsp;&nbsp;\r\n                {currentPage === (allQuestions.length - 1) && !showAnswers && <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>}&nbsp;&nbsp;&nbsp;\r\n                {showAnswers && <button className={'btn btn-secondary'} onClick={downloadJson}>DOWNLOAD</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","C:\\Projects\\onlinetest\\src\\reducers\\mainReducer.js",["51","52"],"export const SET_QUESTIONS = 'SET_QUESTIONS';\r\nexport const SET_SHOW_ANSWERS = 'SET_SHOW_ANSWERS';\r\nexport const SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\r\n\r\nconst initialState = {\r\n    questions: [],\r\n    showAnswers: false,\r\n    filteredQuestions: [],\r\n    selectedType: 'all_questions'\r\n};\r\n\r\nconst shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp\r\n    }\r\n    return array;\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_QUESTIONS:\r\n            const { questions } = action;\r\n            let filteredQuestions;\r\n            if(state.selectedType === 'filter_group1') {\r\n                filteredQuestions = questions.filter((q) => q.group === 1);\r\n            } else if(state.selectedType === 'filter_group2') {\r\n                filteredQuestions = questions.filter((q) => q.group === 2);\r\n            } else if(state.selectedType === 'filter_group3') {\r\n                filteredQuestions = questions.filter((q) => q.group === 3);\r\n            } else if(state.selectedType === 'filter_group4') {\r\n                filteredQuestions = questions.filter((q) => q.group === 4);\r\n            } else if(state.selectedType === 'filter_group5') {\r\n                filteredQuestions = questions.filter((q) => q.group === 5);\r\n            } else if(state.selectedType === 'most_wrong') {\r\n                filteredQuestions = questions.filter((q) => q.wrong_count > 0);\r\n            } else {\r\n                filteredQuestions = questions;\r\n            }\r\n            return {\r\n                ...state,\r\n                questions,\r\n                filteredQuestions\r\n            };\r\n        case SET_SHOW_ANSWERS:\r\n            const { showAnswers } = action;\r\n            return {\r\n                ...state,\r\n                showAnswers\r\n            };\r\n        case SET_SELECTED_TYPE:\r\n            const { selectedType } = action;\r\n            return {\r\n                ...state,\r\n                selectedType\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setQuestions = (\r\n    questions\r\n) => ({\r\n    type: SET_QUESTIONS,\r\n    questions\r\n});\r\n\r\nexport const setShowAnswers = (\r\n    showAnswers\r\n) => ({\r\n    type: SET_SHOW_ANSWERS,\r\n    showAnswers\r\n});\r\n\r\nexport const setSelectedType = (\r\n    selectedType\r\n) => ({\r\n    type: SET_SELECTED_TYPE,\r\n    selectedType\r\n});","C:\\Projects\\onlinetest\\src\\configureStore.js",[],"C:\\Projects\\onlinetest\\src\\components\\OptionView.js",["53","54","55"],"import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport img from '../images/img1.png';\r\nimport './OptionView.scss';\r\nimport parse from 'html-react-parser';\r\n\r\nexport const OptionView = (props) => {\r\n\r\n    const question = props.question;\r\n    const index = props.index;\r\n    const showAnswers = useSelector((state) => state.main.showAnswers);\r\n\r\n    const getResult = (quest) => {\r\n        const result = [];\r\n        if (quest.selectedOptions) {\r\n            quest.selectedOptions.map((item, index) => {\r\n                if (item === true) result.push(quest.options[index]);\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const getOption = (question) => {\r\n\r\n        const getOptionClass = (correctAnswer, showAnswers) => {\r\n            if (correctAnswer && showAnswers) {\r\n                return 'options-label correct'\r\n            } else if (!correctAnswer && showAnswers) {\r\n                return 'options-label wrong'\r\n            } else if (!showAnswers) {\r\n                return 'options-label'\r\n            }\r\n        }\r\n\r\n        return question.options.map((option, index) => {\r\n            const selected = question.selectedOptions ? question.selectedOptions[index] : false;\r\n            // alert(question.ans + \":\" + option);\r\n            const correctAnswer = question.ans === option;\r\n\r\n            return <div key={`Q${question.id}OPT${index}`} >\r\n                <label className={getOptionClass(correctAnswer, showAnswers)}>\r\n                    {selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked value={option} onChange={(event) => props.onChange(event, index)} />}\r\n                    {!selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" value={option} onChange={(event) => props.onChange(event, index)} />}\r\n                    {selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked disabled value={option} />}\r\n                    {!selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" disabled value={option} />}\r\n                    &nbsp;&nbsp;&nbsp;{parse(option)}</label>\r\n\r\n            </div>\r\n        })\r\n    }\r\n\r\n    const getCorrect = (question) => question.ans.toString() === getResult(question).toString()\r\n\r\n    return question ? <div className={showAnswers && !getCorrect(question) ? 'optionview__wrong' : 'optionview__correct'}>\r\n        <div className=\"question\" key={question.id} dangerouslySetInnerHTML={{__html: `Q${index + 1}: ${question.q}`}} />\r\n        {\r\n            question.img && <img src={question.img} />\r\n        }\r\n        <div className=\"options\">{getOption(question)}</div>\r\n    </div> : null;\r\n}\r\n\r\nexport default OptionView;\r\n","C:\\Projects\\onlinetest\\src\\components\\settings\\Settings.jsx",[],"C:\\Projects\\onlinetest\\src\\components\\questionform\\QuestionForm.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":11,"column":11,"nodeType":"62","messageId":"63","endLine":11,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":17,"column":8,"nodeType":"66","endLine":17,"endColumn":10,"suggestions":"67"},{"ruleId":"60","severity":1,"message":"68","line":23,"column":12,"nodeType":"62","messageId":"63","endLine":23,"endColumn":16},{"ruleId":"60","severity":1,"message":"69","line":23,"column":18,"nodeType":"62","messageId":"63","endLine":23,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":30,"column":31,"nodeType":"72","messageId":"73","endLine":30,"endColumn":33},{"ruleId":"70","severity":1,"message":"71","line":45,"column":53,"nodeType":"72","messageId":"73","endLine":45,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":84,"column":28,"nodeType":"72","messageId":"73","endLine":84,"endColumn":30},{"ruleId":"60","severity":1,"message":"74","line":12,"column":7,"nodeType":"62","messageId":"63","endLine":12,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":22,"column":1,"nodeType":"77","endLine":62,"endColumn":3},{"ruleId":"60","severity":1,"message":"78","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":16,"column":53,"nodeType":"72","messageId":"73","endLine":16,"endColumn":55},{"ruleId":"79","severity":1,"message":"80","line":57,"column":29,"nodeType":"81","endLine":57,"endColumn":55},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'jsonData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'shuffle' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch]",{"range":"87","text":"88"},[569,571],"[dispatch]"]