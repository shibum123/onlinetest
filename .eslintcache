[{"/Users/apple/Documents/Projects/onlinetest/src/App.js":"1","/Users/apple/Documents/Projects/onlinetest/src/components/Main.jsx":"2"},{"size":449,"mtime":1609703782000,"results":"3","hashOfConfig":"4"},{"size":3724,"mtime":1609725388000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2un69p",{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/apple/Documents/Projects/onlinetest/src/App.js",[],"/Users/apple/Documents/Projects/onlinetest/src/components/Main.jsx",["11","12","13","14","15"],"import React, { Fragment, useState } from 'react';\nimport { questions } from '../data/data.json';\n\nconst Main = () => {\n\n    let [currentPage, setCurrentPage] = useState(0);\n    let [showAnswers, setShowAnswers] = useState(false);\n\n    let [score, setScore] = useState(0);\n    const [time, setTime] = useState(0);\n\n    const onSubmit = () => {\n        setShowAnswers(true);\n        questions.map(item => {\n            if(item.ans === getResult(item)) setScore(++score);\n        })\n    }\n\n    const getResult = (quest) => {\n        const result = []\n        quest.selectedOptions.map((item, index) => {\n            if(item === true) result.push(quest.options[index])\n        });\n        return result;\n    }\n\n    const onNext = () => {\n        if (currentPage < questions.length - 1) setCurrentPage(++currentPage);\n    }\n\n    const onPrev = (event) => {\n        event.preventDefault();\n        if (currentPage > 0) setCurrentPage(--currentPage);\n    }\n\n    const onChange = (event, index) => {\n        if (!questions[currentPage].selectedOptions) questions[currentPage].selectedOptions = [];\n        questions[currentPage].selectedOptions[index] = event.target.checked\n    }\n\n    const getOption = (question) => {\n        return question.options.map((option, index) => {\n            const selected = question.selectedOptions ? question.selectedOptions[index] : false;\n            const correctAnswer =  question.selectedOptions ? (question.ans === getResult(question)) : false;\n\n            return <div key={`Q${question.id}OPT${index}`}>\n                {selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked value={option} onChange={(event) => onChange(event, index)} />}\n                {!selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" value={option} onChange={(event) => onChange(event, index)} />}\n                {selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked disabled value={option} onChange={(event) => onChange(event, index)} />}\n                {!selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" disabled value={option} onChange={(event) => onChange(event, index)} />}\n                {correctAnswer && selected && showAnswers && <label for=\"index\" className=\"options-label correct\">{option}</label> }\n                {!correctAnswer && selected && showAnswers && <label for=\"index\" className=\"options-label wrong\">{option}</label> }\n                {(!selected || !showAnswers) && <label for=\"index\" className=\"options-label\">{option}</label> }\n            </div>\n        })\n    }\n\n    const renderContent = (question, index) => {\n        return <div>\n            <div className=\"question\" key={question.id}>{`Q${index + 1}: ${question.q}`}</div>\n                <div className=\"options\">\n                    {\n                        getOption(question)\n                    }\n                </div>\n            </div>\n    }\n\n    return (\n        <div className=\"container\">\n        { showAnswers && <h1>{`Your score is: ${score}`}</h1> }\n            { showAnswers ? questions.map((question, index) => renderContent(question, index)) : renderContent(questions[currentPage], currentPage) }\n            <div className=\"buttonContainer\">\n                <button className=\"btn btn-primary\" onClick={onPrev}>&lt;&lt;</button>&nbsp;&nbsp;&nbsp;\n                <button className=\"btn btn-primary\" onClick={onNext}>&gt;&gt;</button>&nbsp;&nbsp;&nbsp;\n                { currentPage === (questions.length - 1) && !showAnswers && <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>}\n            </div>\n        </div>\n    )\n}\n\nexport default Main;",{"ruleId":"16","severity":1,"message":"17","line":1,"column":17,"nodeType":"18","messageId":"19","endLine":1,"endColumn":25},{"ruleId":"16","severity":1,"message":"20","line":10,"column":12,"nodeType":"18","messageId":"19","endLine":10,"endColumn":16},{"ruleId":"16","severity":1,"message":"21","line":10,"column":18,"nodeType":"18","messageId":"19","endLine":10,"endColumn":25},{"ruleId":"22","severity":1,"message":"23","line":14,"column":28,"nodeType":"24","messageId":"25","endLine":14,"endColumn":30},{"ruleId":"22","severity":1,"message":"23","line":21,"column":49,"nodeType":"24","messageId":"25","endLine":21,"endColumn":51},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]