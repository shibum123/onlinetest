[{"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js":"1","/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js":"2","/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js":"3","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js":"4","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js":"5","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js":"6","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx":"7","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx":"8","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js":"9","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/SpellingsView.jsx":"10","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Practise1.js":"11"},{"size":625,"mtime":1611419757550,"results":"12","hashOfConfig":"13"},{"size":1201,"mtime":1616691335752,"results":"14","hashOfConfig":"13"},{"size":223,"mtime":1611419757547,"results":"15","hashOfConfig":"13"},{"size":362,"mtime":1611419757550,"results":"16","hashOfConfig":"13"},{"size":3189,"mtime":1616510722573,"results":"17","hashOfConfig":"13"},{"size":3612,"mtime":1611517032215,"results":"18","hashOfConfig":"13"},{"size":5338,"mtime":1611517032214,"results":"19","hashOfConfig":"13"},{"size":4193,"mtime":1616511087913,"results":"20","hashOfConfig":"13"},{"size":3972,"mtime":1611517032215,"results":"21","hashOfConfig":"13"},{"size":4832,"mtime":1621760107640,"results":"22","hashOfConfig":"13"},{"size":4425,"mtime":1616597105470,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ognmgc",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js",[],["53","54"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js",["55"],"import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport SpellingsView from './components/SpellingsView';\nimport Settings from './components/settings/Settings';\nimport QuestionForm from './components/questionform/QuestionForm';\nimport Practise1 from './components/Practise1';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Online Test\n      </p>\n      </header>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Settings />\n          </Route>\n          <Route exact path=\"/test\">\n            <Main />\n          </Route>\n          <Route exact path=\"/addquestions\">\n            <QuestionForm />\n          </Route>\n          <Route exact path=\"/spellings\">\n            <SpellingsView />\n          </Route>\n          <Route exact path=\"/practise-algebra\">\n            <Practise1 />\n          </Route>\n        </Switch>\n      </Router>\n      <footer className=\"footer\">\n        Copy right @SM IT Consultant Ltd\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js",["56","57"],"export const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SHOW_ANSWERS = 'SET_SHOW_ANSWERS';\nexport const SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\nexport const SET_SPELLINGS = 'SET_SPELLINGS';\n\nconst initialState = {\n    questions: [],\n    spellings: [],\n    groupNames: { 'group1': '', 'group2': '', 'group3': '', 'group4': '', 'group5': '20-Yr 5 Worksheet KAS-3B', 'group6': '20 - Yr 5 SHW - 09 B' },\n    showAnswers: false,\n    filteredQuestions: [],\n    selectedType: 'all_questions'\n};\n\nconst shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n    return array;\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_SPELLINGS:\n            const { spellings } = action;\n            return {\n                ...state,\n                spellings\n            }\n        case SET_QUESTIONS:\n            const { questions } = action;\n            let filteredQuestions;\n            if (state.selectedType === 'filter_group1') {\n                filteredQuestions = questions.filter((q) => q.group === 1);\n            } else if (state.selectedType === 'filter_group2') {\n                filteredQuestions = questions.filter((q) => q.group === 2);\n            } else if (state.selectedType === 'filter_group3') {\n                filteredQuestions = questions.filter((q) => q.group === 3);\n            } else if (state.selectedType === 'filter_group4') {\n                filteredQuestions = questions.filter((q) => q.group === 4);\n            } else if (state.selectedType === 'filter_group5') {\n                filteredQuestions = questions.filter((q) => q.group === 5);\n            } else if (state.selectedType === 'filter_group6') {\n                filteredQuestions = questions.filter((q) => q.group === 6);\n            } else if (state.selectedType === 'filter_group7') {\n                filteredQuestions = questions.filter((q) => q.group === 7);\n            } else if (state.selectedType === 'most_wrong') {\n                filteredQuestions = questions.filter((q) => q.wrong_count > 0);\n            } else {\n                filteredQuestions = questions;\n            }\n            return {\n                ...state,\n                questions,\n                filteredQuestions\n            };\n        case SET_SHOW_ANSWERS:\n            const { showAnswers } = action;\n            return {\n                ...state,\n                showAnswers\n            };\n        case SET_SELECTED_TYPE:\n            const { selectedType } = action;\n            return {\n                ...state,\n                selectedType\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setQuestions = (\n    questions\n) => ({\n    type: SET_QUESTIONS,\n    questions\n});\n\nexport const setShowAnswers = (\n    showAnswers\n) => ({\n    type: SET_SHOW_ANSWERS,\n    showAnswers\n});\n\nexport const setSelectedType = (\n    selectedType\n) => ({\n    type: SET_SELECTED_TYPE,\n    selectedType\n});\n\nexport const setSpellings = (\n    spellings\n) => ({\n    type: SET_SPELLINGS,\n    spellings\n});","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx",["58","59","60","61","62","63","64"],"import React, { useState, useEffect } from 'react';\nimport { questions } from '../data/data.json';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setQuestions, setShowAnswers } from '../reducers/mainReducer';\nimport { OptionView } from './OptionView';\n\nconst Main = () => {\n\n    const dispatch = useDispatch();\n\n    const jsonData = useSelector((state) => (state.main.questions));\n\n    const allQuestions = useSelector((state) => (state.main.filteredQuestions));\n\n    const groupName = useSelector((state) => state.main.groupNames)\n    useEffect(() => {\n        dispatch(setQuestions(questions))\n    }, []);\n\n    let [currentPage, setCurrentPage] = useState(0);\n    const showAnswers = useSelector(state => state.main.showAnswers);\n\n    let [score, setScore] = useState(0);\n    const [time, setTime] = useState(0);\n    const [wrong_array, setWrong_array] = useState([]);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        setWrong_array([]);\n        const arr = [];\n        allQuestions.map(item => {\n            if (item.ans.toString() === getResult(item).toString()) {\n                setScore(++score);\n            } else {\n                arr.push(item.id);\n            }\n        });\n        setWrong_array(arr);\n        dispatch(setShowAnswers(true));\n\n    }\n\n    const getResult = (quest) => {\n        const result = [];\n        if (quest.selectedOptions) {\n            if (quest.type === 'hide_options') {\n                return quest.selectedOptions\n            } else {\n                quest.selectedOptions.map((item, index) => {\n                    if (item === true) result.push(quest.options[index]);\n                });\n            }\n\n        }\n        return result;\n    }\n\n    const onNext = () => {\n        if (currentPage < allQuestions.length - 1) setCurrentPage(++currentPage);\n    }\n\n    const onPrev = (event) => {\n        event.preventDefault();\n        if (currentPage > 0) setCurrentPage(--currentPage);\n    }\n\n    const onTextChange = (event) => {\n        if (!allQuestions[currentPage].selectedOptions) allQuestions[currentPage].selectedOptions = [];\n        allQuestions[currentPage].selectedOptions[0] = event.target.value;\n    }\n\n    const onChange = (event, index) => {\n        if (!allQuestions[currentPage].selectedOptions) allQuestions[currentPage].selectedOptions = [];\n        allQuestions[currentPage].selectedOptions[index] = event.target.checked\n    }\n\n    const getMessage = (score) => {\n        const percent = (score / allQuestions.length * 100).toFixed(2);\n        if (percent < 50) {\n            return 'You score is very poor! Go and Study again Kanishk!'\n        } else if (percent < 70) {\n            return 'You score is poor! Go and Study again Kanishk!'\n        } else if (percent < 80) {\n            return 'You score is fair! Go and Study again Kanishk!'\n        } else if (percent < 90) {\n            return 'You score is good! Study well Kanishk!'\n        } else if (percent < 100) {\n            return 'You score is very good! Try to get 100% Kanishk!'\n        } else if (percent === '100.00') {\n            return 'You score is excellent! Good job Kanishk!'\n        }\n    }\n\n    const downloadJson = () => {\n        questions.map(item => {\n            item.attempted_count += 1;\n            delete item.selectedOptions;\n            if (wrong_array.indexOf(item.id) > -1) {\n                item.wrong_count += 1;\n            }\n        })\n\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(questions));\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"data.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n\n\n    return (\n        <div className=\"container\">\n            Category Name : {allQuestions && allQuestions[0] ? groupName['group' + allQuestions[0].group] : ''}\n            {showAnswers && <h1>{getMessage(score)}</h1>}\n            {showAnswers && <h1>{`Your score is: ${(score / allQuestions.length * 100).toFixed(2)} %`}</h1>}\n            {!showAnswers && (allQuestions.length > 0) && <h3>{`Question ${currentPage + 1} out of ${allQuestions.length}`}</h3>}\n            {showAnswers && (allQuestions.length > 0) ? allQuestions.map((question, index) => <OptionView question={question} index={index} />) : <OptionView question={allQuestions[currentPage]} index={currentPage} onChange={onChange} onTextChange={onTextChange} />}\n            <div className=\"buttonContainer\">\n                <button className={currentPage <= 0 ? 'btn btn-primary disabled' : 'btn btn-primary'} onClick={onPrev}>&lt;&lt;</button>&nbsp;&nbsp;&nbsp;\n                <button className={(currentPage < allQuestions.length - 1) ? 'btn btn-primary' : 'btn btn-primary disabled'} onClick={onNext}>&gt;&gt;</button>&nbsp;&nbsp;&nbsp;\n                {currentPage === (allQuestions.length - 1) && !showAnswers && <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>}&nbsp;&nbsp;&nbsp;\n                {showAnswers && <button className={'btn btn-secondary'} onClick={downloadJson}>DOWNLOAD</button>}\n            </div>\n        </div>\n    )\n}\n\nexport default Main;","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js",["65","66","67"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport img from '../images/img1.png';\nimport './OptionView.scss';\nimport parse from 'html-react-parser';\n\nexport const OptionView = (props) => {\n\n    const question = props.question;\n    const index = props.index;\n    const showAnswers = useSelector((state) => state.main.showAnswers);\n\n    const getResult = (quest) => {\n        const result = [];\n        if (quest.selectedOptions) {\n            quest.selectedOptions.map((item, index) => {\n                if (item === true) result.push(quest.options[index]);\n            });\n        }\n        return result;\n    }\n\n    const getOption = (question) => {\n\n        const getOptionClass = (correctAnswer, showAnswers) => {\n            if (correctAnswer && showAnswers) {\n                return 'options-label correct'\n            } else if (!correctAnswer && showAnswers) {\n                return 'options-label wrong'\n            } else if (!showAnswers) {\n                return 'options-label'\n            }\n        }\n\n        return question.options.map((option, index) => {\n            const selected = question.selectedOptions ? question.selectedOptions[index] : false;\n            // alert(question.ans + \":\" + option);\n            const correctAnswer = question.ans === option;\n\n            return <div key={`Q${question.id}OPT${index}`} >\n                <label className={getOptionClass(correctAnswer, showAnswers)}>\n                    {selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {!selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked disabled value={option} />}\n                    {!selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" disabled value={option} />}\n                    &nbsp;&nbsp;&nbsp;{parse(option)}</label>\n\n            </div>\n        })\n    }\n\n    const getCorrect = (question) => question.ans.toString() === getResult(question).toString()\n\n    return question ? <div className={showAnswers && !getCorrect(question) ? 'optionview__wrong' : 'optionview__correct'}>\n        <div className=\"question\" key={question.id} dangerouslySetInnerHTML={{__html: `Q${index + 1}: ${question.q}`}} />\n        {\n            question.img && <img src={question.img} />\n        }\n        <div className=\"options\">{getOption(question)}</div>\n    </div> : null;\n}\n\nexport default OptionView;\n",["68","69"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/SpellingsView.jsx",["70","71","72"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Practise1.js",["73","74","75","76"],"import moment from 'moment';\nimport React, { useState, useEffect } from 'react';\nimport './Practise.scss';\n\nconst Practise1 = () => {\n\n    let i = 0;\n    const [questions, setQuestions] = useState([]);\n    const [showAnswer, setShowAnswer] = useState(false);\n    const [disabled, setDisabled] = useState(false)\n    const max = 12;\n    const maxQuestions = 30\n\n    useEffect(() => {\n        const q = []\n\n        while (i++ < maxQuestions) {\n            const op1 = Math.random();\n            const op2 = Math.random();\n            const array = ['+', '-', '*'];\n            const rand = array[Math.floor(Math.random() * array.length)];\n\n            const op3 = op2 < 0.5 ? Math.random() * max : -Math.random() * max;\n            q.push({\n                operand1: op1 < 0.5 ? Math.random() * max : -Math.random() * max,\n                operand2: rand === '-' && op3 < 0 ? Math.random() * max : rand == '*' ? -Math.random() * max : Math.random() * max,\n                sign: rand,\n                answer: null,\n            })\n        }\n\n        setQuestions(q)\n    }, [])\n\n    const [timeLeft, setTimeLeft] = useState(maxQuestions / 12 * 60 * 1000);\n\n    let timer;\n\n    useEffect(() => {\n        timer = setTimeout(() => {\n            if ((timeLeft < 1000) || disabled) {\n                clearTimeout(timer);\n                setDisabled(true);\n                onSubmit();\n            } else {\n                \n                setTimeLeft(timeLeft - 1000);\n            }\n        }, 1000);\n    });\n\n    const onSubmit = () => {\n        clearTimeout(timer);\n        setDisabled(true);\n        setShowAnswer(true)\n    }\n\n    const onChange = (event, index) => {\n        const array = [...questions];\n        array[index] = {\n            ...array[index],\n            answer: event.target.value\n        };\n        setQuestions(array)\n    }\n\n    let correctCount = 0;\n\n    return <div className=\"practise\">\n        <h2>Practise</h2>\n        \n        <div className=\"practise__items\">\n            <div className=\"practise__timer\">{moment.utc(timeLeft).format('HH:mm:ss')}</div>\n        {\n            questions.map((item, index) => {\n                let correct = false;\n                let correctAns = null\n\n                if (item.sign === '-') {\n                    correctAns = (Math.round(item.operand1) - Math.round(item.operand2)); // Todo Number\n                } else if (item.sign === '*') {\n                    correctAns = (Math.round(item.operand1) * Math.round(item.operand2));\n                } else {\n                    correctAns = (Math.round(item.operand1) + Math.round(item.operand2));\n                }\n\n                correct = correctAns == questions[index].answer\n\n                if (correct) {\n                    correctCount++;\n                }\n\n\n                return <div className=\"practise__container\">\n                    <div className=\"practise__quest-box\">{index + 1}) </div>&nbsp;&nbsp;&nbsp;<div className=\"practise__quest-box\">{Math.round(item.operand1)} </div><div className=\"practise__quest-box\">{item.sign === '*' ? 'x' : item.sign}</div> <span className=\"practise__quest-box\">{Math.round(item.operand2)}</span> &nbsp;&nbsp;= &nbsp;&nbsp;\n                    { disabled && <input type=\"text\" value={item.answer} onChange={(event) => onChange(event, index)} disabled  /> }\n                    { !disabled && <input type=\"text\" value={item.answer} onChange={(event) => onChange(event, index)}  /> }&nbsp;&nbsp;&nbsp;\n                    &nbsp;&nbsp;&nbsp;\n                    <div className=\"practise__quest-box\">\n                    {\n                        correct && showAnswer &&\n                        <i className=\"fa fa-check\" style={{ 'font-size': '20px', 'color': 'green' }}></i>\n                    }\n                    {\n                        !correct && showAnswer &&\n                        <i className=\"fa fa-times\" style={{ 'font-size': '20px', 'color': 'red' }}></i>\n                    } </div>\n                    <div className=\"practise__quest-box\">\n                    {showAnswer ? correctAns : ''}\n                    </div>\n                </div>\n            })\n        }\n        </div>\n        <br />\n        <center><button className=\"btn btn-primary practise__button\" onClick={onSubmit}>Submit</button></center>\n        {showAnswer && <h2>Your Score is {correctCount} out of {questions.length}</h2>}\n        <br/>\n\n    </div>\n}\n\nexport default Practise1;\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":15,"column":7,"nodeType":"83","messageId":"84","endLine":15,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":25,"column":1,"nodeType":"88","endLine":75,"endColumn":3},{"ruleId":"81","severity":1,"message":"89","line":11,"column":11,"nodeType":"83","messageId":"84","endLine":11,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":18,"column":8,"nodeType":"92","endLine":18,"endColumn":10,"suggestions":"93"},{"ruleId":"81","severity":1,"message":"94","line":24,"column":12,"nodeType":"83","messageId":"84","endLine":24,"endColumn":16},{"ruleId":"81","severity":1,"message":"95","line":24,"column":18,"nodeType":"83","messageId":"84","endLine":24,"endColumn":25},{"ruleId":"96","severity":1,"message":"97","line":31,"column":31,"nodeType":"98","messageId":"99","endLine":31,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":49,"column":57,"nodeType":"98","messageId":"99","endLine":49,"endColumn":59},{"ruleId":"96","severity":1,"message":"97","line":95,"column":28,"nodeType":"98","messageId":"99","endLine":95,"endColumn":30},{"ruleId":"81","severity":1,"message":"100","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":16,"column":53,"nodeType":"98","messageId":"99","endLine":16,"endColumn":55},{"ruleId":"101","severity":1,"message":"102","line":57,"column":29,"nodeType":"103","endLine":57,"endColumn":55},{"ruleId":"77","replacedBy":"104"},{"ruleId":"79","replacedBy":"105"},{"ruleId":"90","severity":1,"message":"91","line":23,"column":8,"nodeType":"92","endLine":23,"endColumn":10,"suggestions":"106"},{"ruleId":"96","severity":1,"message":"97","line":52,"column":37,"nodeType":"98","messageId":"99","endLine":52,"endColumn":39},{"ruleId":"107","severity":1,"message":"108","line":107,"column":42,"nodeType":"103","endLine":107,"endColumn":124},{"ruleId":"109","severity":1,"message":"110","line":26,"column":80,"nodeType":"111","messageId":"112","endLine":26,"endColumn":82},{"ruleId":"90","severity":1,"message":"113","line":33,"column":8,"nodeType":"92","endLine":33,"endColumn":10,"suggestions":"114"},{"ruleId":"90","severity":1,"message":"115","line":40,"column":17,"nodeType":"116","endLine":49,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":87,"column":38,"nodeType":"111","messageId":"112","endLine":87,"endColumn":40},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'shuffle' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'jsonData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["119"],"'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["117"],["118"],["120"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'i'. Either include it or remove the dependency array.",["121"],"Assignments to the 'timer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"122","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [dispatch]",{"range":"127","text":"128"},{"range":"129","text":"128"},"Update the dependencies array to be: [i]",{"range":"130","text":"131"},[621,623],"[dispatch]",[844,846],[1067,1069],"[i]"]