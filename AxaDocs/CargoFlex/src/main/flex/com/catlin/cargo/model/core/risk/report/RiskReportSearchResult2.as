/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.catlin.cargo.model.core.risk.report {
	
	import com.catlin.cargo.model.core.risk.report.RiskReportSearchResult2Base;
	import com.catlin.cargo.view.formatters.DataFormatters;
	
	import flash.utils.IDataInput;

    [Bindable]
    [RemoteClass(alias="com.catlin.cargo.model.core.risk.report.RiskReportSearchResult2")]
    public class RiskReportSearchResult2 extends RiskReportSearchResult2Base {
		
		private static var NA:String = "";
		private static var ZERO:String = "0.00";
		private var _commission:Number;
		private var _netPremium:Number;
		
		public function get netPremium():Number {
			return _netPremium;
		}
		
		public function get grossPremium():Number {
			return premium;
		}		
		
		public function get commission():Number {
			return _commission;
		}
		
		public function get taxStr():String {
			return tax ? DataFormatters.getInstance().getNumberFormater().format(tax) : ZERO;
		}	
		
		public function get netPremiumStr():String {
			return _netPremium ? DataFormatters.getInstance().getNumberFormater().format(_netPremium) : ZERO;
		}
		
		public function get grossPremiumStr():String {
			return premium ? DataFormatters.getInstance().getNumberFormater().format(premium) : ZERO;
		}	
		
		public function get commissionStr():String {
			return _commission ? DataFormatters.getInstance().getNumberFormater().format(_commission) : ZERO;
		}		
		
		public function get commissionPercentageStr():String {
			return (commissionpercentage ? DataFormatters.getInstance().getNumberFormater().format(commissionpercentage) : ZERO) + "%" ;
		}	
		
		public function get triaStr():String {
			return tria ? DataFormatters.getInstance().getNumberFormater().format(tria) : ZERO;
		}
		
		override public function readExternal(input:IDataInput):void {
			super.readExternal(input);
			
			_commission = calculateCommissionAmount();
			_netPremium = calculateNetPremium();
			
			inceptionmonth = isNaN(inceptionmonth) ? 0 : inceptionmonth;
			inceptionyear = isNaN(inceptionyear) ? 0 : inceptionyear;
		
    	}
		
		private function calculateNetPremium():Number {
			if (super.commissionpercentage == 0) 
				return premium;
			var commisionFactor:Number = (1 - (super.commissionpercentage/100)) as Number;
			var net:Number = (premium * commisionFactor)  as Number ;
			return net;
		}
		
		private function calculateCommissionAmount():Number {
			return premium * super.commissionpercentage/100;
		}
	
	}
}