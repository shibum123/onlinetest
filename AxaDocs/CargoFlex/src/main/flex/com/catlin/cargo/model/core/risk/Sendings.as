/**
 * Generated by Gas3 v1.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.catlin.cargo.model.core.risk {
	import com.catlin.cargo.LazyCollectionExecutor;

	import mx.collections.IList;

	[Bindable]
	[RemoteClass(alias="com.catlin.cargo.model.core.risk.Sendings")]
	public class Sendings extends SendingsBase {
		
		public var totalValue:Number = 0;
		public var totalCalculatedPremium:Number = 0;
		public var totalPremium:Number = 0;
		public var totalTax:Number = 0;
		public var highestValue:Number = 0;
		public var isOwnVehicleLimitApplicable:Boolean;
		public var isBargeLimitApplicable:Boolean;

		public function getInsuredRouteCount():Number {
			var insuredRouteCount:Number = 0;
			for each (var route:Route in routes) {
				if (route.value > 0) {
					insuredRouteCount++;
				}
			}
			return insuredRouteCount;
		}
		
		public function hasInsuredRoute():Boolean {
			for each (var route:Route in routes) {
				if (route.value > 0) {
					return true;
				}
			}
			return false;
		}

		public function updateTotals():void {
			new LazyCollectionExecutor(routes, lazyUpdateTotals, routes).execute();
		}

		private function lazyUpdateTotals(routes:IList):void {
			var highest:Number = 0;
			var total:Number = 0;
			var calculatedPremium:Number = 0;
			var premium:Number = 0;
			var tax:Number = 0;
			for each (var route:Route in routes) {
				if (!isNaN(route.value)) {
					total += route.value;
					if (route.rate != null) {
						calculatedPremium += route.calculatedPremium;
						premium += route.rate.premium;
						tax += route.rate.tax;
					}
					if (highest < route.value) {
						highest = route.value;
					}
				}
			}
			totalValue = total;
			totalCalculatedPremium = calculatedPremium;
			totalPremium = premium;
			totalTax = tax;
			highestValue = highest;
			if (totalValue == 0) {
				limit = 0;
			}
			isOwnVehicleLimitApplicable = updateOwnVehicleLimitApplicable();
			isBargeLimitApplicable = updateBargeLimitApplicable();
		}

		private function updateBargeLimitApplicable():Boolean {
			if (totalValue > 0 && type.code == 'DOMESTIC_TRANSITS') {
				return true;
			}
			return false;
		}

		private function updateOwnVehicleLimitApplicable():Boolean {
			if (totalValue > 0 && (type.code == 'GOODS_IN_TRANSIT' || type.code == 'DOMESTIC_TRANSITS')) {
				return true;
			}
			return false;
		}
	}
}