/**
 * Generated by Gas3 v1.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.catlin.cargo.model.core.subjectmatter {
	 import com.catlin.cargo.model.core.covertype.CoverType;
	 import com.catlin.cargo.model.core.covertype.CoverTypeCode;
	
    [Bindable]
    [RemoteClass(alias="com.catlin.cargo.model.core.subjectmatter.SubjectMatter")]
    public class SubjectMatter extends SubjectMatterBase {

		// This is required to force the class into the flex class path
		private var d:DeductibleDefault;

		public function getDeductibleDefaultValueFor(coverType:CoverType):Number {
			if (CoverTypeCode.valueOf(coverType.code) == CoverTypeCode.BUYER_SELLER) {
				return 0;	
			} else {
				for each (var deductibleDefault:DeductibleDefault in sendingsDeductibleDefaults) {
					if (deductibleDefault.coverType.code == coverType.code) {
						return deductibleDefault.value;
					}
				}
			}
			throw new Error("Unexpected deductible default");
		}

		public function getDeductibleDefaultValueByCoverTypeCodeFor(coverTypeCode:CoverTypeCode):Number {
			if (coverTypeCode == CoverTypeCode.BUYER_SELLER) {
				return 0;	
			} else {
				for each (var deductibleDefault:DeductibleDefault in sendingsDeductibleDefaults) {
					if (deductibleDefault.coverType.code == coverTypeCode.name) {
						return deductibleDefault.value;
					}
				}
			}
			throw new Error("Unexpected deductible default");
		}

		public function getDeductibleEditableFor(coverTypeCode:CoverTypeCode):Boolean {
			switch (coverTypeCode) {
				case CoverTypeCode.BUYER_SELLER:
					return true;
				case CoverTypeCode.STOCK:
					return stockCoverDeductiblesDefaultEditable;
				case CoverTypeCode.EXHIBITION:
					return exhibitionCoverDeductiblesDefaultEditable;
				case CoverTypeCode.TOOLS_AND_SAMPLES:
					return toolsAndSamplesCoverDeductiblesDefaultEditable;
				default:
					for each (var deductibleDefault:DeductibleDefault in sendingsDeductibleDefaults) {
					if (CoverTypeCode.valueOf(deductibleDefault.coverType.code) == coverTypeCode) {
						return deductibleDefault.editable;
					}
				}
			}			
			throw new Error("Unexpected deductible default");
		}
    }
}