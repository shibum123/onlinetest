<?xml version="1.0" encoding="utf-8"?>
<mx:FormItem xmlns:mx="http://www.adobe.com/2006/mxml"
			 xmlns:help="com.catlin.cargo.view.help.*">

	<help:TipHelper id="tipHelper"/>

	<mx:Script>
		<![CDATA[
			import com.catlin.cargo.bundles.RB_ui;
			import com.catlin.cargo.model.core.risk.Risk;
			import com.catlin.cargo.model.core.risk.Sendings;
			import com.catlin.cargo.model.security.UserInfo;
			import com.catlin.cargo.view.util.LabelDataItem;
			
			import mx.collections.ArrayCollection;

			[Bindable]
			public var userInfo:UserInfo;
			[Bindable]
			public var quote:Risk;
			[Bindable]
			public var _sending:com.catlin.cargo.model.core.risk.Sendings;
			[Bindable]
			public var percentages:ArrayCollection;
			
			[Bindable]
			public function set sending(sending:com.catlin.cargo.model.core.risk.Sendings):void {
				_sending = sending;
				selectedItem = update(_sending.basisOfValuation);
			}

			public function get sending():com.catlin.cargo.model.core.risk.Sendings {
				return _sending;
			}
			
			[Bindable]
			private var selectedItem:LabelDataItem = null;

			private function updateBasis(event:Event):void {
				if (event != null && event.currentTarget != null && sending != null && ((bovValue == event.currentTarget && !sending.type.percentageBasisOfValuation) || (bovComboValue == event.currentTarget && sending.type.percentageBasisOfValuation))) {
					sending.basisOfValuation=(event.currentTarget is ComboBox) ? event.currentTarget.selectedItem.data : event.currentTarget.text;
					if (sending.basisOfValuation != 'Other') {
						sending.basisOfValuationOther=null;
					}
				}
			}

			private function updateBasisOther(event:Event):void {
				if (event != null && event.currentTarget != null && event.currentTarget.visible && sending != null) {
					sending.basisOfValuationOther=event.currentTarget.text;
				}
			}

			private function update(value:String):LabelDataItem {
				var retObject:LabelDataItem = null;
				if (percentages) {
					for each (var item:LabelDataItem in percentages) {
						if (item.data == value)
							return item;
					}
					if (percentages.length > 0)
						retObject = percentages.getItemAt(0) as LabelDataItem;
				}
				return retObject;
			}
		]]>
	</mx:Script>

	<mx:HBox width="450">
		<mx:TextInput id="bovValue"
					  text="{sending.basisOfValuation}"
					  enabled="{userInfo.isUnderwriter &amp;&amp; quote.editable}"
					  change="updateBasis(event);"
					  includeInLayout="{!sending.type.percentageBasisOfValuation}"
					  visible="{!sending.type.percentageBasisOfValuation}"
					  toolTip="{tipHelper.getTips(bovComboValue, RB_ui.TOOLTIP_BOV_EXHIBITIONS)}"
					  maxChars="32"/>
		<mx:ComboBox id="bovComboValue"
					 dataProvider="{percentages}"
					 enabled="{quote.editable}"
					 selectedItem="{selectedItem}"
					 change="updateBasis(event);"
					 includeInLayout="{sending.type.percentageBasisOfValuation}"
					 visible="{sending.type.percentageBasisOfValuation}"
					 rowCount="{percentages.length}"
					 labelField="label"
					 maxWidth="220"
					 dropdownWidth="240"
					 toolTip="{tipHelper.getTips(bovComboValue, RB_ui.TOOLTIP_BOV_EXHIBITIONS)}"/>
		<mx:TextInput id="bovOther"
					  change="updateBasisOther(event);"
					  enabled="{quote.editable}"
					  visible="{sending.basisOfValuation == 'Other'}"
					  includeInLayout="{sending.basisOfValuation == 'Other'}"
					  text="{sending.basisOfValuationOther}"
					  width="40"
					  maxChars="32"/>
		<mx:Text id="bovAdditionalText"
				 text="{sending.type.basisOfValuationAdditionalInfo}"/>
	</mx:HBox>
</mx:FormItem>
