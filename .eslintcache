[{"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js":"1","/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js":"2","/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js":"3","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js":"4","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js":"5","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js":"6","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx":"7","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx":"8","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js":"9","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/SpellingsView.jsx":"10"},{"size":625,"mtime":1611419757550,"results":"11","hashOfConfig":"12"},{"size":1118,"mtime":1613942846721,"results":"13","hashOfConfig":"12"},{"size":223,"mtime":1611419757547,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1611419757550,"results":"15","hashOfConfig":"12"},{"size":3046,"mtime":1613942846722,"results":"16","hashOfConfig":"12"},{"size":3612,"mtime":1611517032215,"results":"17","hashOfConfig":"12"},{"size":5338,"mtime":1611517032214,"results":"18","hashOfConfig":"12"},{"size":3656,"mtime":1613942846721,"results":"19","hashOfConfig":"12"},{"size":3972,"mtime":1611517032215,"results":"20","hashOfConfig":"12"},{"size":4822,"mtime":1614457196236,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ognmgc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js",[],["46","47"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js",["48","49"],"export const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SHOW_ANSWERS = 'SET_SHOW_ANSWERS';\nexport const SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\nexport const SET_SPELLINGS = 'SET_SPELLINGS';\n\nconst initialState = {\n    questions: [],\n    spellings: [],\n    groupNames: {'group1': '', 'group2': '', 'group3': '', 'group4': '', 'group5': '20-Yr 5 Worksheet KAS-3B', 'group6': '20 - Yr 5 SHW - 09 B'},\n    showAnswers: false,\n    filteredQuestions: [],\n    selectedType: 'all_questions'\n};\n\nconst shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n    return array;\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_SPELLINGS:\n            const { spellings } = action;\n            return {\n                ...state,\n                spellings\n            }\n        case SET_QUESTIONS:\n            const { questions } = action;\n            let filteredQuestions;\n            if (state.selectedType === 'filter_group1') {\n                filteredQuestions = questions.filter((q) => q.group === 1);\n            } else if (state.selectedType === 'filter_group2') {\n                filteredQuestions = questions.filter((q) => q.group === 2);\n            } else if (state.selectedType === 'filter_group3') {\n                filteredQuestions = questions.filter((q) => q.group === 3);\n            } else if (state.selectedType === 'filter_group4') {\n                filteredQuestions = questions.filter((q) => q.group === 4);\n            } else if (state.selectedType === 'filter_group5') {\n                filteredQuestions = questions.filter((q) => q.group === 5);\n            } else if (state.selectedType === 'filter_group6') {\n                filteredQuestions = questions.filter((q) => q.group === 6);\n            } else if (state.selectedType === 'most_wrong') {\n                filteredQuestions = questions.filter((q) => q.wrong_count > 0);\n            } else {\n                filteredQuestions = questions;\n            }\n            return {\n                ...state,\n                questions,\n                filteredQuestions\n            };\n        case SET_SHOW_ANSWERS:\n            const { showAnswers } = action;\n            return {\n                ...state,\n                showAnswers\n            };\n        case SET_SELECTED_TYPE:\n            const { selectedType } = action;\n            return {\n                ...state,\n                selectedType\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setQuestions = (\n    questions\n) => ({\n    type: SET_QUESTIONS,\n    questions\n});\n\nexport const setShowAnswers = (\n    showAnswers\n) => ({\n    type: SET_SHOW_ANSWERS,\n    showAnswers\n});\n\nexport const setSelectedType = (\n    selectedType\n) => ({\n    type: SET_SELECTED_TYPE,\n    selectedType\n});\n\nexport const setSpellings = (\n    spellings\n) => ({\n    type: SET_SPELLINGS,\n    spellings\n});","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx",["50","51","52","53","54","55","56"],"import React, { useState, useEffect } from 'react';\nimport { questions } from '../data/data.json';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setQuestions, setShowAnswers } from '../reducers/mainReducer';\nimport { OptionView } from './OptionView';\n\nconst Main = () => {\n\n    const dispatch = useDispatch();\n\n    const jsonData = useSelector((state) => (state.main.questions));\n\n    const allQuestions = useSelector((state) => (state.main.filteredQuestions));\n\n    const groupName = useSelector((state) => state.main.groupNames)\n    useEffect(() => {\n        dispatch(setQuestions(questions))\n    }, []);\n\n    let [currentPage, setCurrentPage] = useState(0);\n    const showAnswers = useSelector(state => state.main.showAnswers);\n\n    let [score, setScore] = useState(0);\n    const [time, setTime] = useState(0);\n    const [wrong_array, setWrong_array] = useState([]);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        setWrong_array([]);\n        const arr = [];\n        allQuestions.map(item => {\n            if (item.ans.toString() === getResult(item).toString()) {\n                setScore(++score);\n            } else {\n                arr.push(item.id);\n            }\n        });\n        setWrong_array(arr);\n        dispatch(setShowAnswers(true));\n\n    }\n\n    const getResult = (quest) => {\n        const result = [];\n        if (quest.selectedOptions) {\n            if (quest.type === 'hide_options') {\n                return quest.selectedOptions\n            } else {\n                quest.selectedOptions.map((item, index) => {\n                    if (item === true) result.push(quest.options[index]);\n                });\n            }\n\n        }\n        return result;\n    }\n\n    const onNext = () => {\n        if (currentPage < allQuestions.length - 1) setCurrentPage(++currentPage);\n    }\n\n    const onPrev = (event) => {\n        event.preventDefault();\n        if (currentPage > 0) setCurrentPage(--currentPage);\n    }\n\n    const onTextChange = (event) => {\n        if (!allQuestions[currentPage].selectedOptions) allQuestions[currentPage].selectedOptions = [];\n        allQuestions[currentPage].selectedOptions[0] = event.target.value;\n    }\n\n    const onChange = (event, index) => {\n        if (!allQuestions[currentPage].selectedOptions) allQuestions[currentPage].selectedOptions = [];\n        allQuestions[currentPage].selectedOptions[index] = event.target.checked\n    }\n\n    const getMessage = (score) => {\n        const percent = (score / allQuestions.length * 100).toFixed(2);\n        if (percent < 50) {\n            return 'You score is very poor! Go and Study again Kanishk!'\n        } else if (percent < 70) {\n            return 'You score is poor! Go and Study again Kanishk!'\n        } else if (percent < 80) {\n            return 'You score is fair! Go and Study again Kanishk!'\n        } else if (percent < 90) {\n            return 'You score is good! Study well Kanishk!'\n        } else if (percent < 100) {\n            return 'You score is very good! Try to get 100% Kanishk!'\n        } else if (percent === '100.00') {\n            return 'You score is excellent! Good job Kanishk!'\n        }\n    }\n\n    const downloadJson = () => {\n        questions.map(item => {\n            item.attempted_count += 1;\n            delete item.selectedOptions;\n            if (wrong_array.indexOf(item.id) > -1) {\n                item.wrong_count += 1;\n            }\n        })\n\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(questions));\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"data.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    }\n\n\n    return (\n        <div className=\"container\">\n            Category Name : {allQuestions && allQuestions[0] ? groupName['group' + allQuestions[0].group] : ''}\n            {showAnswers && <h1>{getMessage(score)}</h1>}\n            {showAnswers && <h1>{`Your score is: ${(score / allQuestions.length * 100).toFixed(2)} %`}</h1>}\n            {!showAnswers && (allQuestions.length > 0) && <h3>{`Question ${currentPage + 1} out of ${allQuestions.length}`}</h3>}\n            {showAnswers && (allQuestions.length > 0) ? allQuestions.map((question, index) => <OptionView question={question} index={index} />) : <OptionView question={allQuestions[currentPage]} index={currentPage} onChange={onChange} onTextChange={onTextChange} />}\n            <div className=\"buttonContainer\">\n                <button className={currentPage <= 0 ? 'btn btn-primary disabled' : 'btn btn-primary'} onClick={onPrev}>&lt;&lt;</button>&nbsp;&nbsp;&nbsp;\n                <button className={(currentPage < allQuestions.length - 1) ? 'btn btn-primary' : 'btn btn-primary disabled'} onClick={onNext}>&gt;&gt;</button>&nbsp;&nbsp;&nbsp;\n                {currentPage === (allQuestions.length - 1) && !showAnswers && <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>}&nbsp;&nbsp;&nbsp;\n                {showAnswers && <button className={'btn btn-secondary'} onClick={downloadJson}>DOWNLOAD</button>}\n            </div>\n        </div>\n    )\n}\n\nexport default Main;","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js",["57","58","59"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport img from '../images/img1.png';\nimport './OptionView.scss';\nimport parse from 'html-react-parser';\n\nexport const OptionView = (props) => {\n\n    const question = props.question;\n    const index = props.index;\n    const showAnswers = useSelector((state) => state.main.showAnswers);\n\n    const getResult = (quest) => {\n        const result = [];\n        if (quest.selectedOptions) {\n            quest.selectedOptions.map((item, index) => {\n                if (item === true) result.push(quest.options[index]);\n            });\n        }\n        return result;\n    }\n\n    const getOption = (question) => {\n\n        const getOptionClass = (correctAnswer, showAnswers) => {\n            if (correctAnswer && showAnswers) {\n                return 'options-label correct'\n            } else if (!correctAnswer && showAnswers) {\n                return 'options-label wrong'\n            } else if (!showAnswers) {\n                return 'options-label'\n            }\n        }\n\n        return question.options.map((option, index) => {\n            const selected = question.selectedOptions ? question.selectedOptions[index] : false;\n            // alert(question.ans + \":\" + option);\n            const correctAnswer = question.ans === option;\n\n            return <div key={`Q${question.id}OPT${index}`} >\n                <label className={getOptionClass(correctAnswer, showAnswers)}>\n                    {selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {!selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked disabled value={option} />}\n                    {!selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" disabled value={option} />}\n                    &nbsp;&nbsp;&nbsp;{parse(option)}</label>\n\n            </div>\n        })\n    }\n\n    const getCorrect = (question) => question.ans.toString() === getResult(question).toString()\n\n    return question ? <div className={showAnswers && !getCorrect(question) ? 'optionview__wrong' : 'optionview__correct'}>\n        <div className=\"question\" key={question.id} dangerouslySetInnerHTML={{__html: `Q${index + 1}: ${question.q}`}} />\n        {\n            question.img && <img src={question.img} />\n        }\n        <div className=\"options\">{getOption(question)}</div>\n    </div> : null;\n}\n\nexport default OptionView;\n","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/SpellingsView.jsx",["60","61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":15,"column":7,"nodeType":"69","messageId":"70","endLine":15,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":25,"column":1,"nodeType":"73","endLine":73,"endColumn":3},{"ruleId":"67","severity":1,"message":"74","line":11,"column":11,"nodeType":"69","messageId":"70","endLine":11,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":18,"column":8,"nodeType":"77","endLine":18,"endColumn":10,"suggestions":"78"},{"ruleId":"67","severity":1,"message":"79","line":24,"column":12,"nodeType":"69","messageId":"70","endLine":24,"endColumn":16},{"ruleId":"67","severity":1,"message":"80","line":24,"column":18,"nodeType":"69","messageId":"70","endLine":24,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":31,"column":31,"nodeType":"83","messageId":"84","endLine":31,"endColumn":33},{"ruleId":"81","severity":1,"message":"82","line":49,"column":57,"nodeType":"83","messageId":"84","endLine":49,"endColumn":59},{"ruleId":"81","severity":1,"message":"82","line":95,"column":28,"nodeType":"83","messageId":"84","endLine":95,"endColumn":30},{"ruleId":"67","severity":1,"message":"85","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"81","severity":1,"message":"82","line":16,"column":53,"nodeType":"83","messageId":"84","endLine":16,"endColumn":55},{"ruleId":"86","severity":1,"message":"87","line":57,"column":29,"nodeType":"88","endLine":57,"endColumn":55},{"ruleId":"75","severity":1,"message":"76","line":23,"column":8,"nodeType":"77","endLine":23,"endColumn":10,"suggestions":"89"},{"ruleId":"81","severity":1,"message":"82","line":52,"column":37,"nodeType":"83","messageId":"84","endLine":52,"endColumn":39},{"ruleId":"90","severity":1,"message":"91","line":107,"column":42,"nodeType":"88","endLine":107,"endColumn":124},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'shuffle' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'jsonData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["94"],"'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["95"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},"Update the dependencies array to be: [dispatch]",{"range":"99","text":"100"},{"range":"101","text":"100"},[621,623],"[dispatch]",[834,836]]