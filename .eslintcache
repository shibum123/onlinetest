[{"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js":"1","/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js":"2","/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js":"3","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js":"4","/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js":"5","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js":"6","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx":"7","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx":"8","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js":"9"},{"size":625,"mtime":1611419757550,"results":"10","hashOfConfig":"11"},{"size":971,"mtime":1611419757546,"results":"12","hashOfConfig":"11"},{"size":223,"mtime":1611419757547,"results":"13","hashOfConfig":"11"},{"size":362,"mtime":1611419757550,"results":"14","hashOfConfig":"11"},{"size":2728,"mtime":1611517032222,"results":"15","hashOfConfig":"11"},{"size":3612,"mtime":1611517032215,"results":"16","hashOfConfig":"11"},{"size":5338,"mtime":1611517032214,"results":"17","hashOfConfig":"11"},{"size":3434,"mtime":1611517032221,"results":"18","hashOfConfig":"11"},{"size":3972,"mtime":1611517032215,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ognmgc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/Users/shibumanoharan/Documents/Projects/onlinetest/src/index.js",[],["41","42"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/App.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/configureStore.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reportWebVitals.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/reducers/mainReducer.js",["43","44"],"export const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SHOW_ANSWERS = 'SET_SHOW_ANSWERS';\nexport const SET_SELECTED_TYPE = 'SET_SELECTED_TYPE';\n\nconst initialState = {\n    questions: [],\n    showAnswers: false,\n    filteredQuestions: [],\n    selectedType: 'all_questions'\n};\n\nconst shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n    }\n    return array;\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_QUESTIONS:\n            const { questions } = action;\n            let filteredQuestions;\n            if(state.selectedType === 'filter_group1') {\n                filteredQuestions = questions.filter((q) => q.group === 1);\n            } else if(state.selectedType === 'filter_group2') {\n                filteredQuestions = questions.filter((q) => q.group === 2);\n            } else if(state.selectedType === 'filter_group3') {\n                filteredQuestions = questions.filter((q) => q.group === 3);\n            } else if(state.selectedType === 'filter_group4') {\n                filteredQuestions = questions.filter((q) => q.group === 4);\n            } else if(state.selectedType === 'filter_group5') {\n                filteredQuestions = questions.filter((q) => q.group === 5);\n            } else if(state.selectedType === 'most_wrong') {\n                filteredQuestions = questions.filter((q) => q.wrong_count > 0);\n            } else {\n                filteredQuestions = questions;\n            }\n            return {\n                ...state,\n                questions,\n                filteredQuestions\n            };\n        case SET_SHOW_ANSWERS:\n            const { showAnswers } = action;\n            return {\n                ...state,\n                showAnswers\n            };\n        case SET_SELECTED_TYPE:\n            const { selectedType } = action;\n            return {\n                ...state,\n                selectedType\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setQuestions = (\n    questions\n) => ({\n    type: SET_QUESTIONS,\n    questions\n});\n\nexport const setShowAnswers = (\n    showAnswers\n) => ({\n    type: SET_SHOW_ANSWERS,\n    showAnswers\n});\n\nexport const setSelectedType = (\n    selectedType\n) => ({\n    type: SET_SELECTED_TYPE,\n    selectedType\n});","/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/questionform/QuestionForm.js",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/Main.jsx",["45","46","47","48","49","50","51"],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/settings/Settings.jsx",[],"/Users/shibumanoharan/Documents/Projects/onlinetest/src/components/OptionView.js",["52","53","54"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport img from '../images/img1.png';\nimport './OptionView.scss';\nimport parse from 'html-react-parser';\n\nexport const OptionView = (props) => {\n\n    const question = props.question;\n    const index = props.index;\n    const showAnswers = useSelector((state) => state.main.showAnswers);\n\n    const getResult = (quest) => {\n        const result = [];\n        if (quest.selectedOptions) {\n            quest.selectedOptions.map((item, index) => {\n                if (item === true) result.push(quest.options[index]);\n            });\n        }\n        return result;\n    }\n\n    const getOption = (question) => {\n\n        const getOptionClass = (correctAnswer, showAnswers) => {\n            if (correctAnswer && showAnswers) {\n                return 'options-label correct'\n            } else if (!correctAnswer && showAnswers) {\n                return 'options-label wrong'\n            } else if (!showAnswers) {\n                return 'options-label'\n            }\n        }\n\n        return question.options.map((option, index) => {\n            const selected = question.selectedOptions ? question.selectedOptions[index] : false;\n            // alert(question.ans + \":\" + option);\n            const correctAnswer = question.ans === option;\n\n            return <div key={`Q${question.id}OPT${index}`} >\n                <label className={getOptionClass(correctAnswer, showAnswers)}>\n                    {selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {!selected && !showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" value={option} onChange={(event) => props.onChange(event, index)} />}\n                    {selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" checked disabled value={option} />}\n                    {!selected && showAnswers && <input id={`Q${question.id}OPT${index}`} type=\"checkbox\" disabled value={option} />}\n                    &nbsp;&nbsp;&nbsp;{parse(option)}</label>\n\n            </div>\n        })\n    }\n\n    const getCorrect = (question) => question.ans.toString() === getResult(question).toString()\n\n    return question ? <div className={showAnswers && !getCorrect(question) ? 'optionview__wrong' : 'optionview__correct'}>\n        <div className=\"question\" key={question.id} dangerouslySetInnerHTML={{__html: `Q${index + 1}: ${question.q}`}} />\n        {\n            question.img && <img src={question.img} />\n        }\n        <div className=\"options\">{getOption(question)}</div>\n    </div> : null;\n}\n\nexport default OptionView;\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":12,"column":7,"nodeType":"61","messageId":"62","endLine":12,"endColumn":14},{"ruleId":"63","severity":1,"message":"64","line":22,"column":1,"nodeType":"65","endLine":62,"endColumn":3},{"ruleId":"59","severity":1,"message":"66","line":11,"column":11,"nodeType":"61","messageId":"62","endLine":11,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":18,"column":8,"nodeType":"69","endLine":18,"endColumn":10,"suggestions":"70"},{"ruleId":"59","severity":1,"message":"71","line":24,"column":12,"nodeType":"61","messageId":"62","endLine":24,"endColumn":16},{"ruleId":"59","severity":1,"message":"72","line":24,"column":18,"nodeType":"61","messageId":"62","endLine":24,"endColumn":25},{"ruleId":"73","severity":1,"message":"74","line":31,"column":31,"nodeType":"75","messageId":"76","endLine":31,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":49,"column":57,"nodeType":"75","messageId":"76","endLine":49,"endColumn":59},{"ruleId":"73","severity":1,"message":"74","line":95,"column":28,"nodeType":"75","messageId":"76","endLine":95,"endColumn":30},{"ruleId":"59","severity":1,"message":"77","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":16,"column":53,"nodeType":"75","messageId":"76","endLine":16,"endColumn":55},{"ruleId":"78","severity":1,"message":"79","line":57,"column":29,"nodeType":"80","endLine":57,"endColumn":55},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'shuffle' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'jsonData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["83"],"'time' is assigned a value but never used.","'setTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [dispatch]",{"range":"86","text":"87"},[621,623],"[dispatch]"]